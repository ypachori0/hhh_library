backend should:
- connect to and manage a mysql db
- create and maintain models
- initialize tables
- import and sync book data from google sheet
- write changes made to the db back to the spreadsheet

to do:
- finish writing checkout api
- make sure that the spreadsheet is updated whenever the db gets updated

i can move on once:
- GET /books returns all books (done)
- GET /books/<barcode> returns a single book's information based on the barcode (done)
- PATCH /books/<barcode>/toggle changes the book's in_library value in the database (done)
- the spreadsheet updates whenever a change is made to the db (done)

so the/books/<barcode>/toggle route will only change the in_library value of the specific book.
however, i will also have to add a transaction into the transaction table. each transaction will
need to get a transaction id, and the table also has barcode.id and user.id as foreign keys.
each transaction will need to have the date and time that a book is checked out and returned.

so the toggle api will handle both check in and check out. this is my proposed algorithm for the toggle api:
1. get the book's barcode from the url (flask already handles this)
2. using the barcode, look up the book in the database
2a. if barcode doesn't exist, return an error and go back to step 1
3. change the in_library value of the book
3a. if in_library = true, change it to false
3b. if in_library = false, change it to true
4. commit changes to the database
5. sync changes made to the database with the "Book Inventory" worksheet of the spreadsheet

this is my proposed algorithm for the transaction API. i am a little confused on how to do it, but this is what i am thinking:
1. create a new transaction in the transactions table
2. get the book's barcode
3. get the patron id of the patron that checked the book out
4. show the date and time that the book was checked out
5a. if book is checked out, show the due date of the book (2 weeks from checkout date at 6 PM PST)
5b. if book is returned, show the date and time it was returned

for the toggle api, when asking how the endpoint will know who is checking the book out and whether the action is "in" or "out",
i am going with the explicit option. the frontend will specify. how we are thinking this will work is that the patrons will enter their
name and phone number. if name and phone number don't exist in the users table (i am going to change the name to "patrons" later), it will take them
to a form where the name and phone number fields are already filled out, and it will prompt them to enter their email address. from there, it will take them
to a screen with buttons and the options will be "Check Out A Book" and "Return A Book". if the name and phone number already exist in the db, it will take them directly
to the screen. from there, they can choose the action they want to do.

/patrons/identify API:
1. prompt patron for name (first + last) and phone number (this step will be done in the frontend so i am not sure if the backend needs to handle this step, please clarify for me)
2. using name and phone number, look up patron in the database
3a. if name and phone number are not in db, call the /patrons/create API. this takes them to the route where they can enter their email address into a form. the form will have the name and phone number fields already filled out. from there, take them to the options screen
3b. if name and phone number exist in db, take them to the options screen